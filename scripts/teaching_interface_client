#!/usr/bin/env python

import requests
import rospy
from sensor_msgs.msg import Joy
from teaching_interface_ros.msg import TeachingCommand


class Node(object):

    def __init__(self):

        # Variables
        self.var = None

        # Parameters
        self.arduino_ip = rospy.get_param('~arduino_ip')

        # Initialise publishers
        self.joy_pub = rospy.Publisher('~teaching_interface_joy', Joy, queue_size=1)
        self.tc_pub = rospy.Publisher('~teaching_command', TeachingCommand, queue_size=1)

    def run(self):
        while not rospy.is_shutdown():
            # Request data from arduino
            r = requests.get('http://' + self.arduino_ip)
            data = r.json()

            # Process data
            dial = float(data['dial']) / 1023.0
            fsr0 = float(data['fsr0']) / 1023.0
            fsr1 = float(data['fsr1']) / 1023.0
            buttons = [not data['b'+str(i)] for i in range(8)]

            # Publish Joy message
            joy_msg = Joy()
            joy_msg.axes = [dial, fsr0, fsr1]
            joy_msg.buttons = [data['s0'], data['s1']]
            joy_msg.buttons.extend(buttons)
            self.joy_pub.publish(joy_msg)

            # Publish TeachingCommand message
            tc_msg = TeachingCommand()
            if not data['s0']:
                tc_msg.reference = 'base_link'
            else:
                tc_msg.reference = 'ee_link'
            if not data['s1']:
                tc_msg.twist.linear.x = dial * buttons[2] - dial * buttons[3]
                tc_msg.twist.linear.y = dial * buttons[4] - dial * buttons[5]
                tc_msg.twist.linear.z = dial * buttons[6] - dial * buttons[7]
            else:
                tc_msg.twist.angular.x = dial * buttons[2] - dial * buttons[3]
                tc_msg.twist.angular.y = dial * buttons[4] - dial * buttons[5]
                tc_msg.twist.angular.z = dial * buttons[6] - dial * buttons[7]
            tc_msg.grasp = fsr1
            tc_msg.release = buttons[0]
            tc_msg.waypoint = buttons[1]
            self.tc_pub.publish(tc_msg)


if __name__ == '__main__':
    rospy.init_node('teaching_interface_client', anonymous=False)
    n = Node()
    n.run()
